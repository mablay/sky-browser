#pragma pattern_limit 1048576
#pragma array_limit 1048576

// Make sure this is set correctly - the value can be found in the compressed header.
// Otherwise, this hexpat will not work properly.
// 0.10.5: 0x1c
// 0.17.5: 0x1f
#define MESH_VERSION 0x1f

struct Vertex {
    float x;
    float y;
    float z;
    padding[4];
};

struct Uv {
    // Actually half-precision floats
    u16 x;
    u16 y;
};

struct UvVec {
    // Actually half-precision floats
    Uv uv1;
    Uv uv2;
    Uv uv3;
    Uv uv4;
};

struct Vec3 {
    float x;
    float y;
    float z;
};

struct Vec2 {
    float x;
    float y;
};

// Unverified
struct BoneWeight {
    u16 bone;
    float weight;
};

struct Face<T> {
    T idx[3];
};

struct MeshLod {
    // Assumes mesh header was lost as part of the
    // decompression process.

    // Sometimes set to inf. This is fine - this is
    // supposed to be an override for an unknown value
    float;

    // Axis-aligned bounding box
    Vec3 aabbA;
    Vec3 aabbB;

    // Usually a copy of the AABB
    if (MESH_VERSION >= 0x1c) {
        Vec3 aabbA_2;
        Vec3 aabbB_2;
    }

    if (MESH_VERSION > 0x1c) {
        padding[0x20];
        padding[0x20];
    }

    u32 sharedVertices;
    u32 totalVertices;

    if (MESH_VERSION >= 0x1e) {
        u32 isIdx32;
    } else {
        u32 isIdx32 = false;
    }

    u32 numPoints;
    u32 prop11;
    u32 prop12;
    u32 prop13;
    u32 prop14;

    if (MESH_VERSION >= 0x1d) {
        u8 loadMeshNorms; // if set, load mesh normals
        u8 loadInfo2;
        u8 loadInfo3;
        u32 skipMeshPos; // if zero, load mesh positions
        u32 skipUvs; // if zero, load UV coords
        u32 flag3;
    } else {
        u8 loadMeshNorms = false;
        u8 loadInfo2 = false;
        u8 loadInfo3 = false;
        u32 skipMeshPos = false;
        u32 skipUvs = false;
        u32 flag3 = false;
    }

    u8 unk[0x10];
    if (MESH_VERSION < 0x1d || skipMeshPos == 0) {
        Vertex vtxBuffer[sharedVertices];
    }
    
    if (MESH_VERSION < 0x1d || skipUvs == 0) { // or mesh version < 0x1d
        float miscData0[sharedVertices];
    }

    if (loadMeshNorms) {
        UvVec uvBuffer[sharedVertices];
    }

    if (false) { // if animated
        BoneWeight animWeights[sharedVertices];
    }
    
    if (!isIdx32) {
        Face<u16> idxBuffer[totalVertices / 3];
    } else {
        Face<u32> idxBuffer[totalVertices / 3];
    }
    
    if (loadInfo2) {
        if (!isIdx32) {
            // Likely densities
            u8 miscData1[totalVertices * 2];
        } else {
            u8 miscData1[totalVertices * 4];
        }
    }

    if (numPoints > 0) {
        if (!isIdx32) {
            u16 miscData2[sharedVertices * 1];
        } else {
            u16 miscData2[sharedVertices * 2];
        }
    }
    
    if (prop11 > 0) {
        if (!isIdx32) {
            u16 miscData3[sharedVertices * 1];
        } else {
            u16 miscData3[sharedVertices * 2];
        }
    }

    if (prop12 > 0) {
        if (!isIdx32) {
            u8 miscData4[prop12 * 2];
        } else {
            u8 miscData4[prop12 * 4];
        }
    }
    
    if (prop13 > 0) {
        u8 miscData5[prop13 * 4];
    }
    
    if (prop14 > 0) {
        if (!isIdx32) {
            u8 miscData6[prop14 * 4];
        } else {
            u8 miscData6[prop14 * 8];
        }
    }
    
    float miscData7[(totalVertices / 3) * 1];
    
    if (skipMeshPos) {
        u8 altPosData1[sharedVertices * 4];
        u8 altPosData2[sharedVertices];
    }
    
    if (skipUvs) {
        u8 altUvData[sharedVertices * 4];
    }
    
    if (flag3) {
        u8 altFlag3Data[sharedVtxCnt * 4];
    }
};

struct OcclusionData {
    u32 f1;
    u32 f2;
    u8 arr1[f1 * 3 * 4];
    u8 arr2[f2 * 4];
};

struct Mesh {
    MeshLod lods[];
    OcclusionData;
};

MeshLod mesh @ 0x0;